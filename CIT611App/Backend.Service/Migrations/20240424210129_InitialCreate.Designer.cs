// <auto-generated />
using System;
using Backend.Service.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Service.Migrations
{
    [DbContext(typeof(EntitiesContext))]
    [Migration("20240424210129_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Service.Data.Models.DataWarehouse.CompanyDay", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AbuseOrdersCount")
                        .HasColumnType("int");

                    b.Property<int>("AbuseTrips")
                        .HasColumnType("int");

                    b.Property<int>("ArriveToPickupDuration")
                        .HasColumnType("int");

                    b.Property<int>("CanceledOrdersCount")
                        .HasColumnType("int");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("CompanyID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyReferanceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("ExcellentTrips")
                        .HasColumnType("int");

                    b.Property<int>("ExcllentOrdersCount")
                        .HasColumnType("int");

                    b.Property<int>("FastOrdersCount")
                        .HasColumnType("int");

                    b.Property<int>("GoodOrdersCount")
                        .HasColumnType("int");

                    b.Property<int>("GoodTrips")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LateOrdersCount")
                        .HasColumnType("int");

                    b.Property<int>("LateTrips")
                        .HasColumnType("int");

                    b.Property<int>("OrdersCycleDuration")
                        .HasColumnType("int");

                    b.Property<int>("OrdersDeliveryDuration")
                        .HasColumnType("int");

                    b.Property<int>("OrdersDistance")
                        .HasColumnType("int");

                    b.Property<int>("OrdersDuration")
                        .HasColumnType("int");

                    b.Property<int>("OrdersIntegrationDuration")
                        .HasColumnType("int");

                    b.Property<int>("OrdersPendingDuration")
                        .HasColumnType("int");

                    b.Property<int>("OrdersPreparingDuration")
                        .HasColumnType("int");

                    b.Property<int>("TotalOrdersCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalTrips")
                        .HasColumnType("int");

                    b.Property<int>("TripsDistance")
                        .HasColumnType("int");

                    b.Property<int>("TripsDuration")
                        .HasColumnType("int");

                    b.Property<int>("TripsRate")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WaitingDuration")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID1");

                    b.ToTable("CompanyDay", "DataWarehouse");
                });

            modelBuilder.Entity("Backend.Service.Data.Models.DataWarehouse.StoreDay", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AbuseOrdersCount")
                        .HasColumnType("int");

                    b.Property<int>("AbuseTrips")
                        .HasColumnType("int");

                    b.Property<int>("ArriveToPickupDuration")
                        .HasColumnType("int");

                    b.Property<int>("CanceledOrdersCount")
                        .HasColumnType("int");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("ExcellentTrips")
                        .HasColumnType("int");

                    b.Property<int>("ExcllentOrdersCount")
                        .HasColumnType("int");

                    b.Property<int>("FastOrdersCount")
                        .HasColumnType("int");

                    b.Property<int>("GoodOrdersCount")
                        .HasColumnType("int");

                    b.Property<int>("GoodTrips")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LateOrdersCount")
                        .HasColumnType("int");

                    b.Property<int>("LateTrips")
                        .HasColumnType("int");

                    b.Property<int>("OrdersCycleDuration")
                        .HasColumnType("int");

                    b.Property<int>("OrdersDeliveryDuration")
                        .HasColumnType("int");

                    b.Property<int>("OrdersDistance")
                        .HasColumnType("int");

                    b.Property<int>("OrdersDuration")
                        .HasColumnType("int");

                    b.Property<int>("OrdersIntegrationDuration")
                        .HasColumnType("int");

                    b.Property<int>("OrdersPendingDuration")
                        .HasColumnType("int");

                    b.Property<int>("OrdersPreparingDuration")
                        .HasColumnType("int");

                    b.Property<string>("StoreID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TotalOrdersCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalTrips")
                        .HasColumnType("int");

                    b.Property<int>("TripsDistance")
                        .HasColumnType("int");

                    b.Property<int>("TripsDuration")
                        .HasColumnType("int");

                    b.Property<int>("TripsRate")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WaitingDuration")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StoreID");

                    b.ToTable("StoreDay", "DataWarehouse");
                });

            modelBuilder.Entity("Backend.Service.Data.Models.DataWarehouse.TeamDay", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AbuseOrdersCount")
                        .HasColumnType("int");

                    b.Property<int>("AbuseTrips")
                        .HasColumnType("int");

                    b.Property<int>("ArriveToPickupDuration")
                        .HasColumnType("int");

                    b.Property<int>("AutoDispatchedOrdersCount")
                        .HasColumnType("int");

                    b.Property<int>("CanceledOrdersCount")
                        .HasColumnType("int");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("ExcellentTrips")
                        .HasColumnType("int");

                    b.Property<int>("ExcllentOrdersCount")
                        .HasColumnType("int");

                    b.Property<int>("FastOrdersCount")
                        .HasColumnType("int");

                    b.Property<int>("GoodOrdersCount")
                        .HasColumnType("int");

                    b.Property<int>("GoodTrips")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LateOrdersCount")
                        .HasColumnType("int");

                    b.Property<int>("LateTrips")
                        .HasColumnType("int");

                    b.Property<int>("OrdersCycleDuration")
                        .HasColumnType("int");

                    b.Property<int>("OrdersDeliveryDuration")
                        .HasColumnType("int");

                    b.Property<int>("OrdersDistance")
                        .HasColumnType("int");

                    b.Property<int>("OrdersDuration")
                        .HasColumnType("int");

                    b.Property<int>("OrdersIntegrationDuration")
                        .HasColumnType("int");

                    b.Property<int>("OrdersPendingDuration")
                        .HasColumnType("int");

                    b.Property<int>("OrdersPreparingDuration")
                        .HasColumnType("int");

                    b.Property<string>("TeamID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TotalOrdersCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalTrips")
                        .HasColumnType("int");

                    b.Property<int>("TripsDistance")
                        .HasColumnType("int");

                    b.Property<int>("TripsDuration")
                        .HasColumnType("int");

                    b.Property<int>("TripsRate")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WaitingDuration")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TeamID");

                    b.ToTable("TeamDay", "DataWarehouse");
                });

            modelBuilder.Entity("Backend.Service.Models.Client.Company", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReferanceID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Company", "Client");
                });

            modelBuilder.Entity("Backend.Service.Models.Client.Store", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Store", "Client");
                });

            modelBuilder.Entity("Backend.Service.Models.Client.Team", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Team", "Client");
                });

            modelBuilder.Entity("Backend.Service.Models.Order", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AbuseType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AddedToTripTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ArriveToCustomerTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ArriveToPickupTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("BalanceDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CancelTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryZoneName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Distance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("InProgressTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAutoDispatched")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeliverManually")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFastOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaused")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRefund")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTransite")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<decimal?>("MoneyCollected")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OnMyWayTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OnMyWayToPickupTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentMethodID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PickingUpTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PlannedPickupTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadyTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiderID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ShiftDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StoreID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TripCloseTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TripID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TripRate")
                        .HasColumnType("int");

                    b.Property<string>("TripReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Order", "Order");
                });

            modelBuilder.Entity("Backend.Service.Models.OrderLog", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderLog", "Order");
                });

            modelBuilder.Entity("Backend.Service.Models.Rider", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TeamID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("TeamID");

                    b.ToTable("Rider", "Rider");
                });

            modelBuilder.Entity("Backend.Service.Models.RiderLog", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiderID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("RiderID");

                    b.ToTable("RiderLog", "Rider");
                });

            modelBuilder.Entity("Backend.Service.Models.Token", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LoggedOutDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Token", "User");
                });

            modelBuilder.Entity("Backend.Service.Models.Trip", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RiderID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("RiderID");

                    b.ToTable("Trip", "Trip");
                });

            modelBuilder.Entity("Backend.Service.Models.TripLog", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TripID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("TripID");

                    b.ToTable("TripLog", "Trip");
                });

            modelBuilder.Entity("Backend.Service.Models.User", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SaltPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("User", "User");
                });

            modelBuilder.Entity("Backend.Service.Models.UserAction", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("UserAction", "User");
                });

            modelBuilder.Entity("Backend.Service.Data.Models.DataWarehouse.CompanyDay", b =>
                {
                    b.HasOne("Backend.Service.Models.Client.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID1");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Backend.Service.Data.Models.DataWarehouse.StoreDay", b =>
                {
                    b.HasOne("Backend.Service.Models.Client.Store", null)
                        .WithMany("StoreDays")
                        .HasForeignKey("StoreID");
                });

            modelBuilder.Entity("Backend.Service.Data.Models.DataWarehouse.TeamDay", b =>
                {
                    b.HasOne("Backend.Service.Models.Client.Team", null)
                        .WithMany("TeamDays")
                        .HasForeignKey("TeamID");
                });

            modelBuilder.Entity("Backend.Service.Models.Order", b =>
                {
                    b.HasOne("Backend.Service.Models.Client.Company", "Company")
                        .WithMany("Orders")
                        .HasForeignKey("CompanyID")
                        .HasPrincipalKey("ReferanceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Backend.Service.Models.OrderLog", b =>
                {
                    b.HasOne("Backend.Service.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Backend.Service.Models.Rider", b =>
                {
                    b.HasOne("Backend.Service.Models.Client.Team", "Team")
                        .WithMany("Riders")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Backend.Service.Models.RiderLog", b =>
                {
                    b.HasOne("Backend.Service.Models.Rider", "Rider")
                        .WithMany("RiderLogs")
                        .HasForeignKey("RiderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("Backend.Service.Models.Token", b =>
                {
                    b.HasOne("Backend.Service.Models.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Service.Models.Trip", b =>
                {
                    b.HasOne("Backend.Service.Models.Rider", "Rider")
                        .WithMany("Trips")
                        .HasForeignKey("RiderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("Backend.Service.Models.TripLog", b =>
                {
                    b.HasOne("Backend.Service.Models.Trip", "Trip")
                        .WithMany("TripLogs")
                        .HasForeignKey("TripID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Backend.Service.Models.UserAction", b =>
                {
                    b.HasOne("Backend.Service.Models.User", "User")
                        .WithMany("UserActions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Service.Models.Client.Company", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Backend.Service.Models.Client.Store", b =>
                {
                    b.Navigation("StoreDays");
                });

            modelBuilder.Entity("Backend.Service.Models.Client.Team", b =>
                {
                    b.Navigation("Riders");

                    b.Navigation("TeamDays");
                });

            modelBuilder.Entity("Backend.Service.Models.Rider", b =>
                {
                    b.Navigation("RiderLogs");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Backend.Service.Models.Trip", b =>
                {
                    b.Navigation("TripLogs");
                });

            modelBuilder.Entity("Backend.Service.Models.User", b =>
                {
                    b.Navigation("Tokens");

                    b.Navigation("UserActions");
                });
#pragma warning restore 612, 618
        }
    }
}
